# Copyright 2021 Vitagroup AG
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 21 * * *"
          filters:
            branches:
              only:
                - nightly-builds
    jobs:
      - test:
          context:
            - org-global
            - ms_teams
      - security_scan:
          context:
            - org-global
            - ms_teams
  build_and_test:
    jobs:
      - test:
          context:
            - org-global
            - ms_teams
      - security_scan:
          context:
            - org-global
            - ms_teams
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|hotfix\/v\d+\.\d+\.\d+|master|develop)$/
      - tag_version:
          requires:
            - test
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|hotfix\/v\d+\.\d+\.\d+|master)$/
      - build_and_deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - /^(release\/v\d+\.\d+\.\d+|hotfix\/v\d+\.\d+\.\d+|master|develop)$/

jobs:
  security_scan:
    docker:
      - image: cimg/openjdk:17.0.10-node
    steps:
      - checkout
      - run:
          name: Configure NPM
          command: |
            cp ~/project/.circleci/.npmrc ~/project/
            envsubst '$FONTAWESOME_NPM_AUTH_TOKEN' < ~/project/.npmrc
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm install
      - run:
          name: Run CVE scan by OWASP Dependency Check
          command: |
            wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
            mv dependency-check-9.0.9-release.zip ~
            unzip ~/dependency-check-9.0.9-release.zip -d ~
            ~/dependency-check/bin/dependency-check.sh -s ~/project --project num-portal-webapp -o ~/project -f HTML -f XML
      - store_artifacts:
          path: ~/project/dependency-check-report.html
      - jq/install
      - run:
          name: Get OWASP report artifact URL
          command: |
            ARTIFACTS_JSON=$(curl -X GET \
              "https://circleci.com/api/v2/project/github/NUM-Forschungsdatenplattform/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts" \
              -H "Accept: application/json")
            NUMBER_OF_ITEMS=$(echo $ARTIFACTS_JSON | jq '.items | length')
            for (( i=0; i<$NUMBER_OF_ITEMS; i++ ))
            do
              ITEM=$(echo $ARTIFACTS_JSON | jq '.items['$i']')
              PATH_OF_ARTIFACT=$(echo ${ITEM} | jq '.path')
              if [[ "$PATH_OF_ARTIFACT" = *"dependency-check-report.html"* ]]
              then
                echo "export URL_OF_OWASP_REPORT=$(echo $ITEM | jq '.url' -r)" >> $BASH_ENV
                break
              fi
            done
      - run:
          name: MS Teams OWASP Message
          command: |
            SHORT_SHA1=`echo -n $CIRCLE_SHA1 | head -c 7`
            if [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@github.com"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            elif [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@bitbucket.org"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            else
              >&2 echo unknown version control system: $CIRCLE_REPOSITORY_URL
              fail
            fi
            # Note that the "\<<" in the heredoc declaration is escaped from
            # CircleCI's parameters syntax.
            MS_TEAMS_MSG_TEMPLATE=$(cat \<<END_HEREDOC
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "__theme_color__",
              "summary": "CircleCI Build Notification",
              "sections": [
                {
                  "activityTitle": "__build_status__: $CIRCLE_PROJECT_REPONAME job [${CIRCLE_JOB} #${CIRCLE_BUILD_NUM}]($CIRCLE_BUILD_URL)",
                  "facts": [
                    {
                      "name": "Git ref",
                      "value": "$CIRCLE_BRANCH $CIRCLE_TAG"
                    },
                    {
                      "name": "Commit",
                      "value": "$COMMIT_LINK"
                    },
                    {
                      "name": "OWASP",
                      "value": "*OWASP report:* $URL_OF_OWASP_REPORT \n\n *Project repository name:* ${CIRCLE_PROJECT_REPONAME} \n\n *Branch name:* ${CIRCLE_BRANCH} \n\n *Project GIT repository:* << pipeline.project.git_url >> \n\n *CircleCI build:* ${CIRCLE_BUILD_URL} \n\n"
                    }
                  ],
                  "markdown": true
                }
              ]
            }
            END_HEREDOC
            )
            echo "$MS_TEAMS_MSG_TEMPLATE" > /tmp/ms_teams_message
          when: always
      - run:
          name: Report Build Success
          command: |
            MSG_PATH=/tmp/ms_teams_success_message
            sed -e 's/__build_status__/Success/' -e 's/__theme_color__/14a603/' /tmp/ms_teams_message > $MSG_PATH
            curl --fail -H "Content-Type: application/json" --data-binary @$MSG_PATH $CODEX_NOTIFICATIONS
          when: on_success
      - run:
          name: Report Build Failure
          command: |
            MSG_PATH=/tmp/ms_teams_failure_message
            sed -e 's/__build_status__/Failed/' -e 's/__theme_color__/e2091d/' /tmp/ms_teams_message > $MSG_PATH
            curl --fail -H "Content-Type: application/json" --data-binary @$MSG_PATH $CODEX_NOTIFICATIONS
          when: on_fail
  test:
    docker:
      - image: cimg/node:16.20.2
    steps:
      - checkout
      - run:
          name: Configure NPM
          command: |
            cp ~/project/.circleci/.npmrc ~/project/
            envsubst '$FONTAWESOME_NPM_AUTH_TOKEN' < ~/project/.npmrc
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm install
      - run:
          name: Run Linter
          command: npm run lint
      - run:
          name: Run unit tests
          command: npm run test-ci
          environment:
            NODE_OPTIONS: --max_old_space_size=4096
      - store_test_results:
          path: ./reports/junit/
      - run:
          name: Run CVE scan by npm audit
          command: npm audit --audit-level=critical
#      - sonarcloud/scan
      - failed-build-ms-teams-notification
  tag_version:
    docker:
      - image: cimg/node:16.20.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ab:aa:49:91:bb:88:31:93:45:48:38:79:5e:60:53:9d"
      - run:
          name: Bump npm version
          command: |
            git config user.email "50235421+ehrbase-tech-user@users.noreply.github.com"
            git config user.name "ci-bot"
            VERSION_NUMBER="$(echo $CIRCLE_BRANCH | awk -F'/v' '{print $2;}')"
            CURRENT_TAG=$(node -e "console.log(require('./package.json').version)")
            if [ $VERSION_NUMBER != $CURRENT_TAG ]; then
              echo "Updating the application version from the branch to ${VERSION_NUMBER}"
              npm version $VERSION_NUMBER
              git push --set-upstream origin $CIRCLE_BRANCH
            elif [ $CIRCLE_BRANCH = "master" ]; then
              git tag -a $VERSION_NUMBER -m "num-portal-webapp release version ${VERSION_NUMBER}"
              git push origin --tags
            fi

  build_and_deploy:
    docker:
      - image: cimg/node:16.20.2
        auth:
          username: $DOCKER_USER
          password: $DOCKER_HUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: docker23
          docker_layer_caching: true
      - run:
          name: Build and tag image and push
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              TAG=$(node -p "require('./package.json').version")
              git push -u origin master:nightly-builds # Make sure that the nightly build branch is up-to-date with master
            elif [ $CIRCLE_BRANCH = "develop" ]; then
              TAG=$CIRCLE_BRANCH
            else
              TAG="$(echo $CIRCLE_BRANCH | awk -F'/' '{print $2;}')-rc$CIRCLE_BUILD_NUM"
            fi
            docker build --build-arg FONTAWESOME_NPM_AUTH_TOKEN=$FONTAWESOME_NPM_AUTH_TOKEN -t $DOCKER_USER/num-portal-webapp:$TAG .
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            docker push $DOCKER_USER/num-portal-webapp:$TAG

commands:
  failed-build-ms-teams-notification:
    steps:
      - run:
          name: Get OWASP report artifact URL
          command: |
            ARTIFACTS_JSON=$(curl -X GET \
              "https://circleci.com/api/v2/project/github/NUM-Forschungsdatenplattform/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts" \
              -H "Accept: application/json")
            NUMBER_OF_ITEMS=$(echo $ARTIFACTS_JSON | jq '.items | length')
            for (( i=0; i<$NUMBER_OF_ITEMS; i++ ))
            do
              ITEM=$(echo $ARTIFACTS_JSON | jq '.items['$i']')
              PATH_OF_ARTIFACT=$(echo ${ITEM} | jq '.path')
              if [[ "$PATH_OF_ARTIFACT" = *"dependency-check-report.html"* ]]
              then
                echo "export URL_OF_OWASP_REPORT=$(echo $ITEM | jq '.url' -r)" >> $BASH_ENV
                break
              fi
            done
      - run:
          name: MS Teams OWASP Message
          command: |
            SHORT_SHA1=`echo -n $CIRCLE_SHA1 | head -c 7`
            if [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@github.com"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            elif [ `echo "$CIRCLE_REPOSITORY_URL" | grep "^git@bitbucket.org"` ]; then
              COMMIT_LINK=\[$SHORT_SHA1\]\(https://bitbucket.org/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commit/$CIRCLE_SHA1\)
            else
              >&2 echo unknown version control system: $CIRCLE_REPOSITORY_URL
              fail
            fi
            # Note that the "\<<" in the heredoc declaration is escaped from
            # CircleCI's parameters syntax.
            MS_TEAMS_MSG_TEMPLATE=$(cat \<<END_HEREDOC
            {
              "@type": "MessageCard",
              "@context": "http://schema.org/extensions",
              "themeColor": "__theme_color__",
              "summary": "CircleCI Build Notification",
              "sections": [
                {
                  "activityTitle": "__build_status__: $CIRCLE_PROJECT_REPONAME job [${CIRCLE_JOB} #${CIRCLE_BUILD_NUM}]($CIRCLE_BUILD_URL)",
                  "facts": [
                    {
                      "name": "Git ref",
                      "value": "$CIRCLE_BRANCH $CIRCLE_TAG"
                    },
                    {
                      "name": "Commit",
                      "value": "$COMMIT_LINK"
                    },
                    {
                      "name": "OWASP",
                      "value": "*OWASP report:* $URL_OF_OWASP_REPORT \n\n *Project repository name:* ${CIRCLE_PROJECT_REPONAME} \n\n *Branch name:* ${CIRCLE_BRANCH} \n\n *Project GIT repository:* << pipeline.project.git_url >> \n\n *CircleCI build:* ${CIRCLE_BUILD_URL} \n\n"
                    }
                  ],
                  "markdown": true
                }
              ]
            }
            END_HEREDOC
            )
            echo "$MS_TEAMS_MSG_TEMPLATE" > /tmp/ms_teams_message
          when: always
      - run:
          name: Report Build Success
          command: |
            MSG_PATH=/tmp/ms_teams_success_message
            sed -e 's/__build_status__/Success/' -e 's/__theme_color__/14a603/' /tmp/ms_teams_message > $MSG_PATH
            curl --fail -H "Content-Type: application/json" --data-binary @$MSG_PATH $CODEX_NOTIFICATIONS
          when: on_success
      - run:
          name: Report Build Failure
          command: |
            MSG_PATH=/tmp/ms_teams_failure_message
            sed -e 's/__build_status__/Failed/' -e 's/__theme_color__/e2091d/' /tmp/ms_teams_message > $MSG_PATH
            curl --fail -H "Content-Type: application/json" --data-binary @$MSG_PATH $CODEX_NOTIFICATIONS
          when: on_fail

orbs:
  # sonarcloud: sonarsource/sonarcloud@2.0.0
  node: circleci/node@5.2.0
  jq: circleci/jq@3.0.0
